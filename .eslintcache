[{"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\index.js":"1","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\App.js":"2","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\serviceWorker.js":"3","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\LogContext.js":"4","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\VerificationForm.js":"5","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\ProgressBar\\ProgressBar.js":"6","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Hint\\Hint.js":"7","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\ConsoleLogs\\LogCurrent.js":"8","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Hint\\HintBtn.js":"9","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\Loading\\Loading.js":"10","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Results\\Results.js":"11","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\ConsoleLogs\\LogBlock.js":"12","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\hash.js":"13","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\getVerified.js":"14","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\updateVerifiedFields.js":"15","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Btn\\Btn.js":"16","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Phone\\Phone.js":"17","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\Scanner.js":"18","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\postPhone.js":"19","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\config.js":"20","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerRouter.js":"21","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\submitSmsCode.js":"22","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\helperFunctions\\validatePhone.js":"23","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\helperFunctions\\captureVideo.js":"24","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerDL.js":"25","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerFace.js":"26","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\handleLicense.js":"27","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerUtil.js":"28","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\getFaceId.js":"29","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\compareFace.js":"30"},{"size":503,"mtime":1603661285391,"results":"31","hashOfConfig":"32"},{"size":2038,"mtime":1606853435198,"results":"33","hashOfConfig":"32"},{"size":5086,"mtime":1585350672537,"results":"34","hashOfConfig":"32"},{"size":2222,"mtime":1606350202469,"results":"35","hashOfConfig":"32"},{"size":3082,"mtime":1606947651680,"results":"36","hashOfConfig":"32"},{"size":1355,"mtime":1606347871812,"results":"37","hashOfConfig":"32"},{"size":1859,"mtime":1606246498474,"results":"38","hashOfConfig":"32"},{"size":876,"mtime":1606353562753,"results":"39","hashOfConfig":"32"},{"size":458,"mtime":1606349281293,"results":"40","hashOfConfig":"32"},{"size":285,"mtime":1605486841725,"results":"41","hashOfConfig":"32"},{"size":3371,"mtime":1606944836596,"results":"42","hashOfConfig":"32"},{"size":754,"mtime":1605936372381,"results":"43","hashOfConfig":"32"},{"size":368,"mtime":1606849048245,"results":"44","hashOfConfig":"32"},{"size":694,"mtime":1606944836596,"results":"45","hashOfConfig":"32"},{"size":758,"mtime":1606947652755,"results":"46","hashOfConfig":"32"},{"size":363,"mtime":1606252173177,"results":"47","hashOfConfig":"32"},{"size":4907,"mtime":1606352916040,"results":"48","hashOfConfig":"32"},{"size":2114,"mtime":1606435354564,"results":"49","hashOfConfig":"32"},{"size":717,"mtime":1603916692420,"results":"50","hashOfConfig":"32"},{"size":1242,"mtime":1606853435200,"results":"51","hashOfConfig":"32"},{"size":551,"mtime":1606431276852,"results":"52","hashOfConfig":"32"},{"size":1430,"mtime":1606947180339,"results":"53","hashOfConfig":"32"},{"size":165,"mtime":1605937820187,"results":"54","hashOfConfig":"32"},{"size":236,"mtime":1606853435201,"results":"55","hashOfConfig":"32"},{"size":2068,"mtime":1606947158866,"results":"56","hashOfConfig":"32"},{"size":1745,"mtime":1606947170020,"results":"57","hashOfConfig":"32"},{"size":3644,"mtime":1606944836598,"results":"58","hashOfConfig":"32"},{"size":4117,"mtime":1606432080533,"results":"59","hashOfConfig":"32"},{"size":1006,"mtime":1606847685336,"results":"60","hashOfConfig":"32"},{"size":1428,"mtime":1606847600012,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1brz9ik",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\index.js",[],["133","134"],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\App.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\serviceWorker.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\LogContext.js",["135","136","137","138"],"import React, { useContext, useState, useEffect } from 'react'\r\n\r\nconst LogContext = React.createContext()\r\nconst LogUpdateContext = React.createContext()\r\nclass LogMap extends Map {\r\n    setState(...args) {\r\n        this.state = Object.assign({},...args)\r\n        return this.state\r\n    }\r\n\r\n    set(p,v) {\r\n        if (v.complete === true) {\r\n            this.state && this.state.setComplete()\r\n        }\r\n        return super.set(p,v)\r\n    }\r\n\r\n    get(p) { return super.get(p) }\r\n}\r\n\r\nconst logMap = new LogMap()\r\nconst intervalMap = new Map()\r\n\r\nexport function useLog() {\r\n    return useContext(LogContext)\r\n}\r\n\r\nexport function useUpdateLog() {\r\n    return useContext(LogUpdateContext)\r\n}\r\n\r\nexport function LogProvider({ children }) {\r\n    const [ logs, setLogs ] = useState(logMap)\r\n    const [ intervals, setIntervals ] = useState(intervalMap)\r\n    const [ keys, setKeys ] = useState([])\r\n    const [ complete, setComplete ] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (logs.size > 0) {\r\n            logs.forEach(l => setKeys(prev => [...prev,l.info]))\r\n        }\r\n    },[])\r\n\r\n    const updater = (i,c,t) => {\r\n        logMap.set(i,{\r\n            info:i,\r\n            time:t,\r\n            complete:c\r\n        })\r\n    }\r\n\r\n    \r\n    function updateLog(info, __complete) {\r\n        if (__complete) {\r\n            const l = logMap.get(info)\r\n            updater(info,__complete, l?.time)\r\n            clearInterval(intervals.get(info))\r\n        } \r\n        else {\r\n            if (logMap.has(info) === false) {\r\n                updater(info,__complete,0)\r\n                let d = Date.now()\r\n                const interval = setInterval(() => {\r\n                    const t = ((Date.now() - d) / 1000).toFixed(2)\r\n                    updater(info,__complete,t)\r\n                }, 100)\r\n                intervals.set(info, interval)\r\n                setKeys(prev => [...prev,info])\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <LogContext.Provider value={{ logs, keys, complete, intervals }}>\r\n            <LogUpdateContext.Provider value={{ updateLog: (i,c) => updateLog(i,c) }}>\r\n                { children }\r\n            </LogUpdateContext.Provider>\r\n        </LogContext.Provider>\r\n    )\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\VerificationForm.js",["139","140","141","142"],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\ProgressBar\\ProgressBar.js",["143"],"import React, { useEffect, useState } from 'react'\r\nimport \"./ProgressBar.css\"\r\n\r\nexport default function ProgressBar(props) {\r\n    const [step, setStep ] = useState(1)\r\n    \r\n    useEffect(() => {\r\n        if (props.step !== step) {\r\n            setStep(props.step)\r\n        }\r\n    }, [props.step])\r\n\r\n    const title = [\r\n        \"Phone Number Verification\",\r\n        \"Identity Verification\",\r\n        \"Facial Verification\"\r\n    ]\r\n\r\n    const circles = step => {\r\n        const c = []\r\n        for (let i = 0;i < 3; i++) {\r\n            let className = \"circle\"\r\n            if (i === step - 1) className = \"circle active\"\r\n            c.push(<div \r\n                key={i}\r\n                id=\"progress-circle\" \r\n                className={className} \r\n            />)\r\n        }\r\n        return c\r\n    }\r\n\r\n    return (\r\n        <div className=\"section__top\">\r\n            <section className=\"section__progress section dark-bg\">\r\n                <div className=\"container__progress\">\r\n                    { circles(step) }\r\n                </div>\r\n            </section>\r\n            <section className=\"section__header section light-bg\">\r\n                <div className=\"container__header container\">\r\n                    <h2 className=\"header__title\">{ title[step - 1] }</h2>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Hint\\Hint.js",["144"],"import React, { useEffect, useState } from 'react'\r\nimport './Hint.css'\r\nimport Btn from '../Btn/Btn'\r\nlet hint;\r\n\r\nexport default function Hint(props) {\r\n    const [ info, setInfo ] = useState()\r\n\r\n    useEffect(() => {\r\n        hint = hint_info(props.step)\r\n        const { value } = hint.next()\r\n        setInfo(value)\r\n    },[props])\r\n\r\n    const click = () => {\r\n        const { value, done } = hint.next()\r\n        if (done) props.setHint(false)\r\n        else setInfo(value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\" section section__hint info grid\">\r\n            <div className=\"container container__hint info grid--main grid--center\">\r\n                <h1 id=\"info\">{ info }</h1>\r\n            </div>\r\n            <Btn name=\"Next\" enabled={ true } type=\"button\" onClick={ click }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction* hint_info(step) {\r\n    let info;\r\n    switch (step) {\r\n        case 1: info = [\r\n            'Time to verify your phone number',\r\n            'Enter your phone number and select \"Get Code\"',\r\n            'We\\'ll then send you a 6-digit code',\r\n            'Enter the code and submit'\r\n        ]\r\n            break;\r\n        case 2: info = [\r\n            'Now we\\'ll verify your identity',\r\n            'This requies a drivers license or state issued ID',\r\n            'Hold the ID to the camera until scan complete',\r\n            'Make sure ID is visible and image is not blurry'\r\n        ]\r\n            break;\r\n        case 3: info = [\r\n            'Last, we need to verify your profile images',\r\n            'Allow the camera to scan your face like we did with ID',\r\n            'Look directly at the camera until scan complete'\r\n        ]\r\n            break;\r\n        case 4: info = [\r\n            'All done! Click next to see the final results'\r\n        ]\r\n            break;\r\n    }\r\n    for (let i of info) yield i\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\ConsoleLogs\\LogCurrent.js",["145","146"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport './LogCurrent.css'\r\nimport LogBlock from './LogBlock'\r\nimport { useLog } from '../../LogContext'\r\n\r\nexport default function LogCurrent() {\r\n    const [ log, setLog ] = useState(null)\r\n    const { logs, keys } = useLog()\r\n\r\n    useEffect(() => {\r\n        if (keys.length) {\r\n            const { info, time, complete } = logs.get(keys[keys.length-1])\r\n            setLog({info, time, complete})\r\n        }\r\n    }, [keys])\r\n\r\n    return (\r\n        <section className=\"section__logs current section page--bottom dark-bg\">\r\n            <div className=\"container__logs current container\">\r\n                <LogBlock \r\n                    time={ log?.time }\r\n                    info={ log?.info } \r\n                    complete={ log?.complete }\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Hint\\HintBtn.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\Loading\\Loading.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Results\\Results.js",["147","148"],"import React, { useEffect, useState } from 'react'\r\nimport getVerified from '../../requests/getVerified'\r\nimport './Results.css'\r\n\r\nexport default function Results(props) {\r\n    const { userInfo } = props\r\n    let id,emailaddress;\r\n    if (userInfo) {\r\n        id = userInfo.id\r\n        emailaddress = userInfo.emailaddress\r\n    }\r\n    const [ results, setResults ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const verifiedInfo = await getVerified(id,emailaddress) || \"No results could be loaded.\"\r\n            console.log(verifiedInfo)\r\n            setResults(verifiedInfo)\r\n        })()\r\n    }, [])\r\n\r\n    const loaded = () => {\r\n        if (results) {\r\n            const fields = []\r\n            let i = -1\r\n            console.log(results)\r\n            if (results !== \"No results could be loaded.\") {\r\n                for (let r in results) {\r\n                    fields.push(\r\n                    <h3 \r\n                        key={++i} \r\n                        className=\"results--info\">\r\n                        {`${r}: ${results[r]}`}\r\n                    </h3>\r\n                    )\r\n                }\r\n            } else {\r\n                fields.push(\r\n                    <h3 \r\n                        key={++i} \r\n                        className=\"results--info\">\r\n                        { results }\r\n                    </h3>\r\n                    )\r\n            }\r\n            return (\r\n                <>\r\n                    <h1 className=\"results--header\">Verified:</h1>\r\n                    <div className=\"container wrapper__info info\">{fields}</div>\r\n                    <div className=\"wrapper__nextBtn\">\r\n                        <div className=\"container container__btn next btn\">\r\n                            <button id=\"nextBtn\" onClick={() => window.close()}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleRender = () => {\r\n        if (!results) {\r\n            const loadingBlocks = []\r\n            let num = Math.random()*10\r\n            if (num < 4) num = 4\r\n            else if (num > 8) num = 8\r\n            else num = num\r\n            for (let i=0;i<num;i++) {\r\n                const rand = Math.random()\r\n                let width = rand * 100\r\n                if (width < 35) width = 50\r\n                loadingBlocks.push(\r\n                    <div\r\n                        key={ i }\r\n                        className=\"block--loading\" \r\n                        style={{ \r\n                            marginLeft: '0px',\r\n                            marginBottom: '5px',\r\n                            width: `${width.toFixed(0)}%`,\r\n                            height: '1.3rem'\r\n                        }}>\r\n                    </div>\r\n                )\r\n            }\r\n            return (\r\n                <>\r\n                    <h5 className=\"results--loading\">Loading verified...</h5>\r\n                    <div className=\"wrapper__info info\">{loadingBlocks}</div>\r\n                </>\r\n            )\r\n        } else {\r\n            return loaded()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"section section__results info grid\">\r\n            <div className=\"container container__results info grid\">\r\n                { handleRender() }\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\ConsoleLogs\\LogBlock.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\hash.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\getVerified.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\updateVerifiedFields.js",["149"],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Btn\\Btn.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Phone\\Phone.js",["150","151","152","153"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport './Phone.css'\r\nimport { useUpdateLog } from '../../LogContext'\r\nimport validatePhone from '../../helperFunctions/validatePhone'\r\nimport postPhone from '../../requests/postPhone'\r\nimport submitSmsCode from '../../requests/submitSmsCode'\r\nimport Btn from '../Btn/Btn'\r\n\r\nexport default function Phone(props) {\r\n    const [ code, setCode ] = useState(null)\r\n    const [ errMsg, setErrMsg ] = useState(false)\r\n    const { updateLog } = useUpdateLog()\r\n    const phoneRef = useRef()\r\n    const codeRef = useRef()\r\n    const phoneErrRef = useRef()\r\n    const codeErrRef = useRef()\r\n\r\n    useEffect(() => {\r\n        if (!props.phone.phoneNumber) {\r\n            phoneRef.current.classList.add('active')\r\n        } else {\r\n            codeRef.current.classList.add('active')\r\n        }\r\n    }, [])\r\n\r\n    const submit = e => {\r\n        e.preventDefault()\r\n        let input;\r\n        if (phoneRef.current.classList.contains('active')) {\r\n            input = phoneRef.current.children[0]\r\n        } else {\r\n            input = codeRef.current.children[0]\r\n        }\r\n        const val = input.value\r\n\r\n    //  phone\r\n        if (input.name === 'phonenumber') {\r\n            const validPhoneNumber = validatePhone(val)\r\n        //  valid format: update state and get sms code\r\n            if (validPhoneNumber) {\r\n                props.setPhone(prev => ({\r\n                    ...prev,\r\n                    phoneNumber:val,\r\n                    verificationStatus:\"pending\"\r\n                }))\r\n                postPhone({\r\n                    phone:val\r\n                })\r\n                if (phoneRef.current.classList.contains('invalid')) {\r\n                    phoneRef.current.classList.remove('invalid')\r\n                    phoneErrRef.current.classList.remove('invalid')\r\n                }\r\n                nextInput()\r\n            } else {\r\n                phoneRef.current.classList.add('invalid')\r\n                phoneErrRef.current.classList.add('invalid')\r\n                setErrMsg(true)\r\n            }\r\n    //  sms code\r\n        } else {\r\n            if (props.phone.phoneNumber) {\r\n                const regex = /^[0-9]{6}$/g\r\n                if (regex.test(val)) {\r\n                    setCode(val)\r\n                    if (codeRef.current.classList.contains('invalid')) {\r\n                        codeRef.current.classList.remove('invalid')\r\n                        codeErrRef.current.classList.remove('invalid')\r\n                    }\r\n                    submitSmsCode({\r\n                        userInfo: props.userInfo,\r\n                        code: val,\r\n                        phone: props.phone,\r\n                        setPhone: props.setPhone,\r\n                        setStep: props.setStep,\r\n                        logs: props.logs,\r\n                        setLoading: props.setLoading\r\n                    })\r\n                } else {\r\n                    codeRef.current.classList.add('invalid')\r\n                    codeErrRef.current.classList.add('invalid')\r\n                }\r\n            } else setErrMsg(true)\r\n        }\r\n    }\r\n\r\n    const nextInput = () => {\r\n        phoneRef.current.classList.remove('active')\r\n        codeRef.current.classList.add('active')\r\n    }\r\n\r\n    return (\r\n        <div className=\"section section__phone grid\">\r\n            <p ref={ phoneErrRef } className=\"grid--center grid--main err--msg\">\r\n                    Please enter a valid phone number</p>\r\n            <p ref={ codeErrRef } className=\"grid--center grid--main err--msg\">\r\n                    Required code must be six-digits in length</p>\r\n\r\n            <form className=\"form__phone grid--main grid--center\">\r\n                <div className=\"container__inputs\">\r\n                    <div ref={ phoneRef } className=\"wrapper wrapper__phonenumber\">\r\n                        <input \r\n                            type=\"tel\"\r\n                            name=\"phonenumber\"\r\n                            className=\"input__phonenumber\" \r\n                            placeholder=\"Phone Number\"\r\n                            onKeyPress={e => {\r\n                                if (e.key === \"Enter\") submit(e)\r\n                            }}/>\r\n                    </div>\r\n                    <div ref={ codeRef } className=\"wrapper wrapper__smscode\">\r\n                        <input\r\n                            name=\"smscode\" \r\n                            className=\"input__smscode\" \r\n                            placeholder=\"6-digit code\"\r\n                            onKeyPress={e => {\r\n                                if (e.key === \"Enter\") submit(e)\r\n                            }}/>\r\n                    </div>\r\n                </div>\r\n                <Btn \r\n                    type='submit' \r\n                    name=\"Submit\" \r\n                    onClick={ submit }/>\r\n            </form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\Scanner.js",["154","155","156"],"import React, { useRef, useEffect, useState, useCallback } from 'react'\r\nimport captureVideo from '../../helperFunctions/captureVideo'\r\nimport scannerRouter from './scannerRouter'\r\nimport './Scanner.css'\r\n\r\nexport default function Scanner(props) {\r\n    const [ video, setVideo ] = useState(null)\r\n    const [ stream, setStream ] = useState(null)\r\n    const [ canvas, setCanvas ] = useState(null)\r\n    \r\n    const videoRef = useRef(null)\r\n    const canvasRef = useRef(null)\r\n    const imageRef = useRef(null)\r\n    \r\n\r\n    useEffect(() => {\r\n        if (!video && !canvas) {\r\n            setVideo(videoRef.current)\r\n            setCanvas(canvasRef.current)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (video) {\r\n            if (!video.width) {\r\n                new Promise(res => captureVideo(video,res))\r\n                .then(r => setStream(r))\r\n            }\r\n        }\r\n    }, [video])\r\n\r\n    useEffect(() => {\r\n        if (stream) {\r\n            console.log(videoRef.current.width, videoRef.current.height)\r\n            paintCanvas(canvas,stream,setCanvas)\r\n            scannerRouter({...props,canvas,stream})\r\n        }\r\n        return () => {\r\n            if (stream?.srcObject?.active) {\r\n                const track = stream.srcObject.getTracks()[0]\r\n                track.stop()\r\n            }\r\n        }\r\n    }, [stream])\r\n\r\n    return (\r\n        <section className=\"section__video section__main\">\r\n            <div className=\"video-wrap\">\r\n                <video id=\"video\" ref={ videoRef } style={{ position: \"absolute\" }} autoPlay muted></video>\r\n            </div>\r\n            <canvas id=\"canvas\" ref={ canvasRef } style={{ display: \"none\" }}></canvas>\r\n            <img id=\"image\" alt=\"blank for screen capture\" ref={ imageRef } style={{ display: \"none\" }}></img>\r\n        </section>\r\n    )\r\n}\r\n\r\nfunction paintCanvas(canvas,stream,setCanvas) {\r\n    const { width, height } = stream.getBoundingClientRect()\r\n    canvas.width = width\r\n    canvas.height = height\r\n    const context = canvas.getContext('2d')\r\n    context.drawImage(stream, 0, 0, width, height)\r\n    setCanvas(canvas)\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\postPhone.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\config.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerRouter.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\submitSmsCode.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\helperFunctions\\validatePhone.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\helperFunctions\\captureVideo.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerDL.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerFace.js",["157"],"const getFaceId = require('../../requests/getFaceId')\r\nconst compareFaceToProfile = require('../../requests/compareFace')\r\nconst { updateVerifiedFields } = require('../../requests/updateVerifiedFields')\r\n\r\n\r\nexport function scannerFace(props) {\r\n    const { id,emailaddress,logs,step,setStep,canvas,stream,setLoading } = props\r\n    let waitForFace;\r\n    \r\n//  Detect Face\r\n    const controller = new AbortController()\r\n    const promiseFace = new Promise((res,rej) => {\r\n\r\n//  logs: Face Detection\r\n    logs.set(\"Scanning for face\",false)\r\n\r\n\r\n        waitForFace = setInterval(() => getFaceId(canvas,stream,controller,res,rej), 3200)\r\n    }).then(faceId => {\r\n        clearInterval(waitForFace)\r\n        controller.abort()\r\n        setLoading(true)\r\n        return faceId\r\n    }).then(() => {\r\n    //  logs: Face Detection\r\n        logs.set(\"Scanning for face\",true)\r\n    //  logs: Face Verification\r\n        logs.set(\"Comparing facial landmarks\",false)\r\n    }).catch(() => {\r\n        clearInterval(waitForFace)\r\n        controller.abort()\r\n    })\r\n\r\n\r\n//  Compare Face\r\n    promiseFace.then(async data => {\r\n        if (data !== undefined) {\r\n            const { faceId } = await data[0]\r\n            return compareFaceToProfile(id,emailaddress,await faceId)\r\n        }\r\n    }).then(async verifiedFields => {\r\n        if (await verifiedFields?.isIdentical) {\r\n            return new Promise(async res => {\r\n                updateVerifiedFields({profileImage:true},id,emailaddress,res)\r\n            })\r\n        }\r\n    }).then(() => {\r\n        if (stream.srcObject.active === true) {\r\n        //  logs: Face Verification\r\n            logs.set(\"Comparing facial landmarks\",true)\r\n            setStep(4)\r\n            return\r\n        }\r\n    })\r\n}\r\n","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\handleLicense.js",["158"],"const { getBlob } = require('../components/Scanner/scannerUtil')\r\nconst predictionKey = require('../config').CV_DETECT_ID_PREDICTION_KEY\r\n\r\nexport async function detectLicense(canvas,stream,controller,res,rej) {\r\n    const url = require('../config').CV_DETECT_ID\r\n    const { blob, context, imageData } = getBlob(canvas,stream)\r\n    const headers = new Headers()\r\n    headers.append(\"Content-Type\", \"application/octet-stream\")\r\n    headers.append(\"Prediction-Key\", predictionKey)\r\n    const opt = {\r\n        method: \"POST\",\r\n        headers: headers,\r\n        body: await blob,\r\n        signal: controller.signal\r\n    }\r\n\r\n    fetch(url, opt)\r\n    .then(result => {\r\n        if (result.status !== 200) rej(\"too many requests\")\r\n        return result.json()\r\n    })\r\n    .then(result => {\r\n        const tagName = result.predictions[0].tagName\r\n        const probability = result.predictions[0].probability\r\n        console.log(tagName,probability)\r\n        const noLicense = tagName === \"Negative\" || tagName === \"Low Quality\"\r\n        if (noLicense) return\r\n        res({blob,context,imageData})\r\n    })\r\n    .catch(err => console.error(\"This is the error:\", err))\r\n}\r\n\r\n\r\n\r\n\r\nexport function readLicense(blob,res) {\r\n    const controller1 = new AbortController()\r\n    const controller2 = new AbortController()\r\n    const url = require('../config').READAPI_READ\r\n    const keyname = require('../config').READAPI_KEY_NAME\r\n    const key = require('../config').READAPI_KEY_VALUE\r\n    \r\n    const opt = {\r\n        method: 'POST',\r\n        body: blob,\r\n        headers: {\r\n           'Content-Type': 'application/octet-stream', \r\n           [keyname]: key\r\n        },\r\n        signal: controller1.signal\r\n    }\r\n\r\n    //  Read\r\n    //  =======================================================\r\n    const readDL = new Promise(res => {\r\n        fetch(url, opt)\r\n        .then(d => {\r\n            if (d.headers.has('Operation-Location')) {\r\n                controller1.abort()\r\n                res(d.headers.get('Operation-Location'))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    })\r\n\r\n\r\n    //  getRead\r\n    //  =======================================================\r\n    readDL.then(getRead => {\r\n        new Promise(res => checkResult(getRead,keyname,key,controller2,res))\r\n        .then(r => {\r\n            let result;\r\n            new Promise((res,rej) => getInfo(r,res,rej))\r\n            .then(r => {\r\n                controller2.abort()\r\n                result = r\r\n                res(r)\r\n            }).catch(() => {\r\n                console.log(\"Not enough lines. this is the result\")\r\n                return result\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n\r\n\r\n\r\nasync function checkResult(getRead,keyName,keyValue,controller2,res) {\r\n    const readResult = await fetch(getRead, {\r\n        method: 'GET',\r\n        headers: { [keyName]: keyValue },\r\n        signal: controller2.signal\r\n    })\r\n    .then(r => { return r.json() })\r\n    .then(result => {\r\n        if (result.status !== \"succeeded\") {\r\n            sleep(3200)\r\n            checkResult(getRead,keyName,keyValue,controller2,res)\r\n        } else res(result)\r\n    })\r\n    .catch(err => { return {error:err} })\r\n}\r\n\r\n\r\nfunction getInfo(data,res,rej) {\r\n    const lines = data.analyzeResult?.readResults[0]?.lines\r\n    if (lines.length > 4) {\r\n        res(lines.map(line => line.text))\r\n    } else rej()\r\n}\r\n\r\n\r\nfunction sleep(ms) {\r\n    const now = Date.now()\r\n    let curr = null\r\n    do {\r\n      curr = Date.now()\r\n    } while (curr - now < ms)\r\n}","C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\components\\Scanner\\scannerUtil.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\getFaceId.js",[],"C:\\Users\\Josh\\projects\\Kamshed_production\\yim-verify-form-azure\\src\\requests\\compareFace.js",[],["159","160"],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":33,"column":19,"nodeType":"167","messageId":"168","endLine":33,"endColumn":26},{"ruleId":"165","severity":1,"message":"169","line":34,"column":24,"nodeType":"167","messageId":"168","endLine":34,"endColumn":36},{"ruleId":"165","severity":1,"message":"170","line":36,"column":23,"nodeType":"167","messageId":"168","endLine":36,"endColumn":34},{"ruleId":"171","severity":1,"message":"172","line":42,"column":7,"nodeType":"173","endLine":42,"endColumn":9,"suggestions":"174"},{"ruleId":"165","severity":1,"message":"175","line":32,"column":25,"nodeType":"167","messageId":"168","endLine":32,"endColumn":38},{"ruleId":"165","severity":1,"message":"176","line":33,"column":13,"nodeType":"167","messageId":"168","endLine":33,"endColumn":20},{"ruleId":"171","severity":1,"message":"177","line":44,"column":7,"nodeType":"173","endLine":44,"endColumn":9,"suggestions":"178"},{"ruleId":"171","severity":1,"message":"179","line":74,"column":8,"nodeType":"173","endLine":74,"endColumn":10,"suggestions":"180"},{"ruleId":"171","severity":1,"message":"181","line":11,"column":8,"nodeType":"173","endLine":11,"endColumn":20,"suggestions":"182"},{"ruleId":"183","severity":1,"message":"184","line":34,"column":5,"nodeType":"185","messageId":"186","endLine":59,"endColumn":6},{"ruleId":"165","severity":1,"message":"187","line":1,"column":28,"nodeType":"167","messageId":"168","endLine":1,"endColumn":34},{"ruleId":"171","severity":1,"message":"172","line":15,"column":8,"nodeType":"173","endLine":15,"endColumn":14,"suggestions":"188"},{"ruleId":"171","severity":1,"message":"189","line":20,"column":8,"nodeType":"173","endLine":20,"endColumn":10,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":66,"column":24,"nodeType":"167","messageId":"193","endLine":66,"endColumn":27},{"ruleId":"165","severity":1,"message":"194","line":13,"column":11,"nodeType":"167","messageId":"168","endLine":13,"endColumn":17},{"ruleId":"165","severity":1,"message":"195","line":10,"column":13,"nodeType":"167","messageId":"168","endLine":10,"endColumn":17},{"ruleId":"165","severity":1,"message":"196","line":11,"column":13,"nodeType":"167","messageId":"168","endLine":11,"endColumn":19},{"ruleId":"165","severity":1,"message":"197","line":12,"column":13,"nodeType":"167","messageId":"168","endLine":12,"endColumn":22},{"ruleId":"171","severity":1,"message":"198","line":24,"column":8,"nodeType":"173","endLine":24,"endColumn":10,"suggestions":"199"},{"ruleId":"165","severity":1,"message":"200","line":1,"column":46,"nodeType":"167","messageId":"168","endLine":1,"endColumn":57},{"ruleId":"171","severity":1,"message":"201","line":21,"column":8,"nodeType":"173","endLine":21,"endColumn":10,"suggestions":"202"},{"ruleId":"171","severity":1,"message":"203","line":44,"column":8,"nodeType":"173","endLine":44,"endColumn":16,"suggestions":"204"},{"ruleId":"165","severity":1,"message":"205","line":7,"column":34,"nodeType":"167","messageId":"168","endLine":7,"endColumn":38},{"ruleId":"165","severity":1,"message":"206","line":94,"column":11,"nodeType":"167","messageId":"168","endLine":94,"endColumn":21},{"ruleId":"161","replacedBy":"207"},{"ruleId":"163","replacedBy":"208"},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-unused-vars","'setLogs' is assigned a value but never used.","Identifier","unusedVar","'setIntervals' is assigned a value but never used.","'setComplete' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'logs'. Either include it or remove the dependency array.","ArrayExpression",["211"],"'setNestedLogs' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'nestedLogs' and 'updateLog'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has a missing dependency: 'updateLog'. Either include it or remove the dependency array.",["213"],"React Hook useEffect has a missing dependency: 'step'. Either include it or remove the dependency array.",["214"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useRef' is defined but never used.",["215"],"React Hook useEffect has missing dependencies: 'emailaddress' and 'id'. Either include them or remove the dependency array.",["216"],"no-self-assign","'num' is assigned to itself.","selfAssignment","'result' is assigned a value but never used.","'code' is assigned a value but never used.","'errMsg' is assigned a value but never used.","'updateLog' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.phone.phoneNumber'. Either include it or remove the dependency array.",["217"],"'useCallback' is defined but never used.","React Hook useEffect has missing dependencies: 'canvas' and 'video'. Either include them or remove the dependency array.",["218"],"React Hook useEffect has missing dependencies: 'canvas' and 'props'. Either include them or remove the dependency array.",["219"],"'step' is assigned a value but never used.","'readResult' is assigned a value but never used.",["209"],["210"],"no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},"Update the dependencies array to be: [logs]",{"range":"238","text":"239"},"Update the dependencies array to be: [nestedLogs, updateLog]",{"range":"240","text":"241"},"Update the dependencies array to be: [updateLog]",{"range":"242","text":"243"},"Update the dependencies array to be: [props.step, step]",{"range":"244","text":"245"},"Update the dependencies array to be: [keys, logs]",{"range":"246","text":"247"},"Update the dependencies array to be: [emailaddress, id]",{"range":"248","text":"249"},"Update the dependencies array to be: [props.phone.phoneNumber]",{"range":"250","text":"251"},"Update the dependencies array to be: [canvas, video]",{"range":"252","text":"253"},"Update the dependencies array to be: [canvas, props, stream]",{"range":"254","text":"255"},[1088,1090],"[logs]",[1248,1250],"[nestedLogs, updateLog]",[2315,2317],"[updateLog]",[286,298],"[props.step, step]",[479,485],"[keys, logs]",[633,635],"[emailaddress, id]",[852,854],"[props.phone.phoneNumber]",[674,676],"[canvas, video]",[1337,1345],"[canvas, props, stream]"]